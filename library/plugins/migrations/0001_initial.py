# ----------------------------------------------------------------------------
# Copyright (c) 2018-2022, QIIME 2 development team.
#
# Distributed under the terms of the Modified BSD License.
#
# The full license is in the file LICENSE, distributed with this software.
# ----------------------------------------------------------------------------

# Generated by Django 2.1 on 2018-08-31 23:18

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.manager


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Plugin',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(help_text="The plugin's project title.", max_length=500, unique=True)),
                ('slug', models.SlugField(max_length=500, unique=True)),
                ('short_summary', models.CharField(
                    help_text='This field is displayed in "overviews" such as the plugin listing page.', max_length=500)),
                ('description', models.TextField(help_text='A free-form description of the plugin.')),
                ('install_guide', models.TextField(
                    help_text='This field should contain directions (or a link to directions) on how to install the plugin.')),
                ('published', models.BooleanField(default=False,
                                                  help_text='This field controls the plugin\'s visibility to other users on library.qiime2.org.  Only mark as "true" if you are prepared for the plugin to go "live"!')),
                ('source_url', models.URLField(blank=True, help_text="The URL for obtaining the plugin's source code.", max_length=500)),
                ('version', models.CharField(blank=True, help_text='The current version of the plugin.', max_length=500)),
            ],
            options={
                'ordering': ['-updated_at'],
                'default_manager_name': 'unsafe',
            },
            managers=[
                ('unsafe', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='PluginAuthorship',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('list_position', models.IntegerField(
                    help_text='This field will specify the sort order the plugin authors will be displayed in.')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE,
                                             related_name='plugin_author_list', to=settings.AUTH_USER_MODEL)),
                ('plugin', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE,
                                             related_name='plugin_author_list', to='plugins.Plugin')),
            ],
            options={
                'verbose_name_plural': 'plugin authorship',
            },
        ),
        migrations.AddField(
            model_name='plugin',
            name='authors',
            field=models.ManyToManyField(related_name='plugins',
                                         through='plugins.PluginAuthorship', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='plugin',
            name='dependencies',
            field=models.ManyToManyField(db_table='plugins_plugin_dependencies',
                                         help_text='Other plugins that this plugin depends on.', to='plugins.Plugin'),
        ),
        migrations.AlterUniqueTogether(
            name='pluginauthorship',
            unique_together={('plugin', 'author')},
        ),
    ]
